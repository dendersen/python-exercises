Blackjack Teori Hvad er Java Til dette projekt, er der blevet valgt er skrive projekt i Java. Java er et High-level sprog, dette betyder at man skal g�r meget i detalje, n�r man skrevet koden. Dette g�r at man skal skrive med types, dette bliver forklaret sener i synopsis. Java ogs� designet s� den har s� lidt som mulige afh�ngigheder. Dette betyder at man skal importere man afh�ngigheder, som fx. en grafiske afh�ngighed. Men det meste speciale ved Java, det meste speciale ved Java er dens slogan bag den nemlig �write once, run anywhere�, dette betyder at man skal kun skrive koden en gang, og s� vil det virke p� alle enheder. Dette sker er igennem JVM , dette er et program som k�re p� en computer. Programmet skaber en virtuel maskine inde i den fysiske maskine, denne virtuelle maskine kan k�re Java koden. Types og objekter Java er baseret p� klasser og objekter, og som udvidelse af det er alle informationer gemt som en type. En type fort�ller din compiler hvad en variabel indeholder, men ud over det kan man ogs� lave sine egne typer, dette er objekter, en klass kan for eksempel v�re en kodeblok eller bare en samling af funktioner, men man kan ogs� gemme dem som en datatype. Dette g�res med keyworded �new� som laver en ny af den klasse, dette er en instance. Man kan gemme s�dan en som en variabel, n�r en klasse omdannes til en type, gemmer den variabel en kopi af klassen hvor alle ikke statiske variabler og metoder i classen �ndre sig uafh�ngigt af andre versioner af classen. I bilag 1 kan man se et eksempel af en class og objekt i brug. I dette program bliver der brugt 4 tal typer, en teksttype og nogle brugerdefinerede typer. Tal typer Integrer En integrer er et hele tal i mellem -9.223.372.036.854.775.808 og 9.223.372.036.854.775.808 Bytes Bytes er n�sten det samme som en integrer, dog kan en byte kun indeholde et tal i mellem -128 og 127. Boolesk En boolesk type kan kun indeholde tal 0 eller 1. Dog er det ikke mening at man skal fx. plusse dem sammen, men man skal kigge p� det som sandt eller falsk. Float Og den sidste taltype er floats, denne taltype er anderledes fra Integrer eller byte, da float kan indeholde decimaltal som omkring 6 og 7 decimaler lang. Teksttype har navnet string og kan inde holde tekst. Denne tekst kan v�re bogstaver eller andre tegn. En af disse tegn kan v�re tal, dog bliver disse tal set af computeren som ikke matematiske tegn, men som bare tegn. Dette betyder at man ikke kan lave matematik med dem. I dette projekt er der ogs� blevet lavet brugerdefinerede typer, disse brugerdefinerede typer er objekter som blevet skabt med klasser. Denne f�rste type bliver kaldt CardObject. Dette er en simpel klasse, som er selve kortene. Klassen indeholder en byte for hvilket tal kortet har, og en byte for hvilket symbol der er p� kortet. Ud over dette er der ogs� blevet skrevet kode der kan omskrevet disse informationer i forskellige formater. Den anden type er PlayerHandObject. Dette er en klasse som indholdet alle spilleres deck. Klassen indeholder ogs� kode som kan �ndre spillerens kort og gemme kode til at gemme og loade spillet. Den tredje er Tabel. Denne klasse indeholder alle spillere og deres deck. Men denne klasse indeholder ogs� alle kort der ikke bliver brugt i et deck. Og denne klasse indeholder ogs� det meste af koden der k�rer spillet Der er ogs� blevet skrevet en klasse som hedder AI. Dette er en klasse som g�r det muligt at videre udvikle spillet til at indeholde AI spillere. Denne klasse indholdet kode til AI og en �dare� variabel som bruges til at finde en handling som AI vil udf�re. Multithreading N�r man skriver Java kode, kan man bestemme om man vil have sit program g�re p� en eller flere tr�de. Dette betyder at man kan have koden fra program k�re p� mere end en CPU-tr�de, alts� man distribuere opgaver i et program mellem flere tr�de og den m�de kan udf�re flere opgaver p� en m�de. I dette projekt bliver der brugt 2 tr�de, en til Processing og en anden til alt andet. Grunden til dette er blevet valgt er fordi der bliver brugt afh�ngighed ved navnet Processing. Denne afh�ngighed har en funktion som k�re i et loop og bliver kaldet ca. 60 gange i sekundet. Dette betyder hvis programmet havde en tr�d ville det v�re sv�rt at udf�re noget, da Processing vil bruge den ene tr�de hele tiden og ikke give plads til andre opgaver. Processing I dette projekt er der blevet gjort stort brug af Processing. Processing er en Java afh�ngighed som bliv lavet af Processing Foundation. Denne afh�ngighed bliv brugt til at lave det grafiske i programmet, dette vil sige alt som brugen ser, som ikke er i konsollen. Grunden til at Processing bliver brugt og ikke andre afh�ngigheder er fordi Processing Foundation har ogs� lavet en version til et andet sprog ved navnet JavaScript. Og gruppen har en stor erfaring JavaScript version af Processing. Dokumentation af sleve produktet Dette projekt er blivet delt op i to dele. Den f�rste del er alt det som brugen ser (Frontend), mens den anden del er alt som bruger ikke ser (Backend). I figuren under kan man se et flowdiagram over flowet i hele programmet. Figur 1, Flowdiagram over flowet i programmet. Alle de r�de kasser er til vidre udvilking af AI-spiller Frontend I frontend er m�let at vise brugen alt som der skal blive vist. Her er det vigtig at de beregninger om kortene gjort i backend delen, dog kan skal alle beregninger om, hvor fx positionen af kortene v�re gjort frontend. Hvis man kigger p� flowdiagrammet over, kan man se alt over den r�de strippede linje frontend. Frontend indeholder ikke s� mange processer, da der ikke skal blive gjort mange forskellige ting, men der bliver gjort samme hele tiden. Derfor er det en lille kasse i forhold til backend. Hele front end er baseret p� en afh�ngighed ved navnet Processing. I Processing er der en funktion som bliver hele tiden loopet. Hastigheden p� dette loop er omkring 60 gange i sekundet, grunden til dette loop har denne specifikke hastighed er fordi det er FPS p� kanvasset, dvs. at hver gang Draw bliver k�rt, bliver der skabt en frame til kanvasset. P� grund af dette er Draw den vigtigst funktion i frontend delen. Som sagt er funktion Draw den vigtigste funktion i frontend, derfor bliver alt udf�rt ud fra den. Og hvis man kigger p�, hvordan kortene bliver skabt, vil kun se at de bliver skabt hver frame og slettet efter. Grunden til at man g�r dette er fordi Processing k�re p� en anden CPU- tr�d end alt andet, p� grund af dette bliver der hele tiden skabt kort ud fra data fra backend. M�den p� at dette sker bliver vist i pseudocoden under: Function Draw: let deck, h�nd, spiller; For(Antal af spillere): For(Antal af kort i hver spillerens h�nd): deck += ny kort(symbol, number); spiller.deck.h�nd += deck hvis (spiller == spillers tur): spiller.deck.vis_kort(); slet spiller I pseudocoden over bliver der skabt et array til hver spiller, hvor derefter bliver tilf�jet alle de kort som hver spiller. Efter at have skabt alle spillers deck og kort, bliver der kigget efter om, hvem kort der skal blive vist. Og til sidste bliver spiller slettet. Backend I backend delen sker som alt som brugen ikke ser. Dette kan v�re fx. generation af dealer. Som sagt i afsnit f�r s� k�re backend p� en anden tr�d og m�den de to kommunikere er ved at backend venter p� at brugen og laver alt output som frontend skal bruge til at v�re statisk, alts� �ndre sig kun hvis brugen g�r noget. I figuren under kan man se et simplere version af figur 1. Her kan man se at den laver kort, fort�ller det til frontend og derefter venter p� svar. Figur 2, En simpel version af flowdiagrammet Stedet hvor blackjack bliver kontrolleret er i klassen BlackJackController. I denne klasse bliver der bestem, hvad der brugerne skal kigge p�. Det her hvor der fx. bliver bestemt at, hvis brugen trykker p� hit, at den skal give brugen flere kort. Men det er ikke her, hvor alt information om kortene bliver gemt, det bliver gemt i klassen fra Tabel.java. I denne klasse bliver alt information holdt og gemt. Denne klasse ogs� der, hvor frontenden henter information fra. Den tredje vigtig klasse er BlackJackProcessing, denne klasse er ikke supern�dvendig i forhold til, hvordan spillet virker, men den er vigtig i forhold til kode l�sbarhed. Da den fx. formsikre nogen af de lange navne p� funktioner, som der ofte kommer med Object-oriented programming. Der ogs� nogen simpel funktion, som bliver brugt til fx. bestemme, hvad ES kortet skal v�re. Diskussion I dette projekt har det st�rste problem v�re at finde en afh�ngighed til at vise noget til brugen. Der startet med Javas egnen Graphics klasse, men da der kom problemer med den bliv skifter over til Processing og alt frontend kode bliv skriftet helt, som ikke superoptimalt i forhold til tid brugt p� projektet. P� grund af dette er det mest af backend skrevet til at passe Javas Graphics klasse. Som er senere hen blevet skrevet om til at passe til Processing. Derfor kan der v�re problemer med kommunikation mellem backend og frontend, da det oprindeligt var designet til et andet system. Et andet problem der har v�re i dette projekt, er valg af programmeringssprog. Da der det sprog som bliv valgt er Java til at lave frontend, dette har som sagt ikke v�re optimalt. Til at l�se dette problem kunne man have brugt et mere velegnet programsprog som fx. JavaScript. Og hvis man skulle vidre udvikle spillet p� at tilf�je fx. falske m�nter, tilf�je flere muligheder end bare stand og hit eller AI spillere. Konklusion I dette projekt, har der v�re lidt rundt de mere avancement del af Java og der ogs� blevet kigget p� en Java afh�ngighed (Processing), hvordan man kan bruge den til at tegne kort. Selve spillet som bliv lavet er baisset p� det kendte kortspiller blackjack, hvor der ikke er lige s� mange muligheder som fx. split eller double. Dog er der blevet designet med mulighed for at tilf�je flere spiller som ikke mennesker. Bilag Bilag 1 public class Main { public static void main(String[] args) { // Denne funktion bliver automatisk k�rt n�r program starter. foo boo = new foo(); // Dette siger at variablen boo skal have en information som klassen foo har. boo.hello(); // S�dan k�re en funktion/metode, som er inde i variablen Og den resultatet vil v�re et \"Hello world!\" i konsollen. } static class foo { // Dette klassen foo public void hello() { // Denne funktion siger \"Hello world!\" i konsollen System.out.println(\"Hello world!\"); } } } Bilag 2 https://github.com/dendersen/year_assignment Java virtual machine Fag: Programming B Dato: 22-05-2022 Gruppe: David og Lukas